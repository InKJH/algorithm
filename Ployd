package Algorithm;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

public class FloydAlgorithm01 {
	// 각 역을 나타내는 클래스
	static class Station {
		String name; // 역 이름
		String line;
		Map<String, Integer> connections;// 이웃역과의 연결 정보 (역 이름, 소요 시간)

		public Station(String name, String line) {
			this.name = name;
			this.line = line;
			this.connections = new HashMap<>();
		}

		// 이웃 역과의 연결 추가
		public void addConnection(String neighbor, int time) {
			this.connections.put(neighbor, time);
		}
	}

	// 지하철 네트워크를 나타내는 클래스
	static class SubwayNetwork {
		Map<String, Station> stations; // 역 이름과 Station 객체를 저장하는 맵

		public SubwayNetwork() {
			stations = new HashMap<>();
		}

		// 역 추가
		public void addStation(String name, String line) {
			stations.putIfAbsent(name, new Station(name, line));
		}

		// 두 역 간의 연결 추가
		public void connectStations(String from, String to, int time) {
			stations.get(from).addConnection(to, time);
			stations.get(to).addConnection(from, time);
		}

		// 최단 경로를 계산하는 메소드 (플로이드 알고리즘 사용)
		public int findShortestPath(String start, String destination) {
			List<String> listStations = new ArrayList<>(stations.keySet());
			int distances = stations.size();
			int firstStation = listStations.indexOf(start);
			int lastStation = listStations.indexOf(destination);
			int[][] dist = new int[distances][distances];
			int[][] previous = new int[distances][distances]; // 경로 추적용

			// 모든 역 간의 거리 배열을 초기화
			for (int from = 0; from < distances; from++) {
				for (int to = 0; to < distances; to++) {
					if (from == to) {
						dist[from][to] = 0;
						previous[from][to] = -1;
					} else {
						dist[from][to] = Integer.MAX_VALUE;
						previous[from][to] = -1;
					}
				}
			}
			// 역 간 배열 채우기
			for (String station : stations.keySet()) {
				int from = listStations.indexOf(station);
				Station currentStation = stations.get(station);
				for (Map.Entry<String, Integer> entry : currentStation.connections.entrySet()) {
					String neighbor = entry.getKey();
					int time = entry.getValue();
					int to = listStations.indexOf(neighbor);
					dist[from][to] = time;
					previous[from][to] = from;
				}
			}

			// 모든 역에 대해 최단 경로 계산
			for (int mid = 0; mid < distances; mid++) {
				for (int from = 0; from < distances; from++) {
					for (int to = 0; to < distances; to++) {
						if (dist[from][mid] != Integer.MAX_VALUE && dist[mid][to] != Integer.MAX_VALUE) {
							if (dist[from][to] > dist[from][mid] + dist[mid][to]) {
								dist[from][to] = dist[from][mid] + dist[mid][to];
								previous[from][to] = previous[mid][to]; // 경로 업데이트
							}
						}
					}
				}
			}

			List<String> path = new ArrayList<>();
			List<String> transfer = new ArrayList<>(); // 환승역을 저장할 리스트
			List<String> transferLine = new ArrayList<>();
			String previousLine = null;
			int current = lastStation;

			// 도착점부터 시작점까지 역을 거꾸로 추적
			while (current != firstStation) {
				path.add(listStations.get(current)); // 현재 역을 경로에 추가
				current = previous[firstStation][current]; // 이전 역으로 이동
			}
			path.add(listStations.get(firstStation)); // 시작점 추가
			Collections.reverse(path); // 다시 경로 뒤집기

			for (int i = 0; i < path.size(); i++) {
				String station = path.get(i);
				String currentLine = stations.get(station).line; // 현재 역의 정보

				// 환승역 찾기
				if (previousLine != null && !currentLine.equals(previousLine)) {
					transfer.add(station);
				}
				previousLine = currentLine; // 현재 역의 호선을 이전 호선으로 설정
			}

			for (String station : transfer) {
				String lineName = stations.get(station).line; // 역이 속한 호선
				transferLine.add("(" + lineName + ")" + station);
			}

			System.out.println("Path: " + String.join(" -> ", path));
			System.out.println("환승역: " + String.join(", ", transferLine));
			return dist[firstStation][lastStation];
		}

		public static void main(String[] args) {
			SubwayNetwork network = new SubwayNetwork();

			// 사용자 입력
			Scanner scanner = new Scanner(System.in);
			System.out.print("출발역을 입력하세요: ");
			String start = scanner.nextLine();
			System.out.print("도착역을 입력하세요: ");
			String destination = scanner.nextLine();

			long startTime = System.nanoTime();

			// 부산 1호선
			String[] line1 = { "다대포해수욕장", "다대포항", "낫개", "신장림", "장림", "동매", "신평", "하단", "당리", "사하", "괴정", "대티", "서대신",
					"동대신", "토성", "자갈치", "남포", "중앙", "부산역", "초량", "부산진", "좌천", "범일", "범내골", "서면", "부전", "양정", "시청", "연산",
					"교대", "동래", "명륜", "온천장", "부산대", "장전", "구서", "두실", "남산", "범어사", "노포" };
			int[] line1Times = { 3, 2, 3, 3, 2, 3, 3, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3, 3, 2, 2, 2, 2, 3, 2,
					2, 3, 2, 2, 3, 3, 2, 2 };
			for (int i = 0; i < Math.min(line1.length - 1, line1Times.length); i++) {
				network.addStation(line1[i], "1호선");
				network.addStation(line1[i + 1], "1호선");
				network.connectStations(line1[i], line1[i + 1], line1Times[i]);
			}

			// 부산 2호선
			String[] line2 = { "장산", "중동", "해운대", "동백", "벡스코", "센텀시티", "민락", "수영", "광안", "금련산", "남천", "경성대부경대", "대연",
					"못골", "지게골", "문현", "국제금융센터부산은행", "전포", "서면", "부암", "가야", "동의대", "개금", "냉정", "주례", "감전", "사상", "덕포",
					"모덕", "모라", "구남", "구명", "덕천", "수정", "화명", "율리", "동원", "금곡", "호포", "증산", "부산대양산캠퍼스", "남양산", "양산" };
			int[] line2Times = { 2, 2, 3, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 3, 2, 2, 2, 3, 2, 3,
					2, 2, 3, 2, 3, 2, 3, 3, 3, 2, 2, 3 };

			for (int i = 0; i < Math.min(line2.length - 1, line2Times.length); i++) {
				network.addStation(line2[i], "2호선");
				network.addStation(line2[i + 1], "2호선");
				network.connectStations(line2[i], line2[i + 1], line2Times[i]);
			}

			// 부산 3호선
			String[] line3 = { "수영", "망미", "배산", "물만골", "연산", "종합운동장", "사직", "미남", "만덕", "남산정", "숙등", "덕천", "구포",
					"강서구청", "체육공원", "대저" };
			int[] line3Times = { 2, 3, 2, 2, 3, 3, 2, 3, 3, 2, 3, 3, 2, 3, 2 };
			for (int i = 0; i < Math.min(line3.length - 1, line3Times.length); i++) {
				network.addStation(line3[i], "3호선");
				network.addStation(line3[i + 1], "3호선");
				network.connectStations(line3[i], line3[i + 1], line3Times[i]);
			}

			// 부산 4호선
			String[] line4 = { "미남", "동래", "수안", "낙민", "충렬사", "명장", "서동", "금사", "반여농산물시장", "석대", "영산대", "반여", "재송",
					"센텀" };
			int[] line4Times = { 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 3, 2, 2 };
			for (int i = 0; i < Math.min(line4.length - 1, line4Times.length); i++) {
				network.addStation(line4[i], "4호선");
				network.addStation(line4[i + 1], "4호선");
				network.connectStations(line4[i], line4[i + 1], line4Times[i]);
			}

			// 토성역 - 감천문화마을 2번 버스
			String[] bus2 = { "토성", "감천문화마을" };
			int[] bus2Times = { 10 };
			for (int i = 0; i < Math.min(bus2.length - 1, bus2Times.length); i++) {
				network.addStation(bus2[i], "2번버스");
				network.addStation(bus2[i + 1], "2번버스");
				network.connectStations(bus2[i], bus2[i + 1], bus2Times[i]);
			}

			// 장산역 - 오시리아역 - 롯데리아 어드벤처 부산 1001번 버스 + 도보 중 버스
			String[] bus1001 = { "장산", "오시리아" };
			int[] bus1001Times = { 18 };
			for (int i = 0; i < Math.min(bus1001.length - 1, bus1001Times.length); i++) {
				network.addStation(bus1001[i], "1001번버스");
				network.addStation(bus1001[i + 1], "1001번버스");
				network.connectStations(bus1001[i], bus1001[i + 1], bus1001Times[i]);
			}

			// 서면역 - 롯데백화점 부산본점 도보
			String[] walk1 = { "서면", "롯데백화점 부산본점" };
			int[] walk1Times = { 2 };
			for (int i = 0; i < Math.min(walk1.length - 1, walk1Times.length); i++) {
				network.addStation(walk1[i], "도보");
				network.addStation(walk1[i + 1], "도보");
				network.connectStations(walk1[i], walk1[i + 1], walk1Times[i]);
			}

			// 장산역 - 오시리아역 - 롯데리아 어드벤처 부산 1001번 버스 + 도보 중 도보
			String[] walk2 = { "오시리아", "롯데리아 어드벤처 부산" };
			int[] walk2Times = { 10 };
			for (int i = 0; i < Math.min(walk2.length - 1, walk2Times.length); i++) {
				network.addStation(walk2[i], "도보");
				network.addStation(walk2[i + 1], "도보");
				network.connectStations(walk2[i], walk2[i + 1], walk2Times[i]);
			}

			// 종합운동장역 - 부산아시아드주경기장 도보
			String[] walk3 = { "종합운동장", "부산아시아드주경기장" };
			int[] walk3Times = { 22 };
			for (int i = 0; i < Math.min(walk3.length - 1, walk3Times.length); i++) {
				network.addStation(walk3[i], "도보");
				network.addStation(walk3[i + 1], "도보");
				network.connectStations(walk3[i], walk3[i + 1], walk3Times[i]);
			}

			// 동래역 - 명륜자이아파트 도보
			String[] walk4 = { "동래", "명륜자이아파트" };
			int[] walk4Times = { 4 };
			for (int i = 0; i < Math.min(walk4.length - 1, walk4Times.length); i++) {
				network.addStation(walk4[i], "도보");
				network.addStation(walk4[i + 1], "도보");
				network.connectStations(walk4[i], walk4[i + 1], walk4Times[i]);
			}

			// 환승 정보
			network.connectStations("서면", "서면", 5); // 1호선 - 2호선
			network.connectStations("연산", "연산", 5); // 1호선 - 3호선
			network.connectStations("동래", "동래", 5); // 1호선 - 4호선
			network.connectStations("덕천", "덕천", 5); // 2호선 - 3호선
			network.connectStations("수영", "수영", 5); // 2호선 - 3호선
			network.connectStations("미남", "미남", 5); // 3호선 - 4호선
			network.connectStations("토성", "토성", 5); // 토성역 - 감천문화마을 2번 버스
			network.connectStations("장산", "장산", 5); // 장산역 - 오시리아역 - 롯데리아 어드벤처 부산 1001번 버스 + 도보 중 버스
			network.connectStations("서면", "서면", 5); // 서면역 - 롯데백화점 부산본점 도보
			network.connectStations("오시리아", "오시리아", 5); // 장산역 - 오시리아역 - 롯데리아 어드벤처 부산 1001번 버스 + 도보 중 도보
			network.connectStations("종합운동장", "종합운동장", 5); // 종합운동장역 - 부산아시아드주경기장 도보
			network.connectStations("동래", "동래", 5); // 동래역 - 명륜자이아파트 도보

			if (!network.stations.containsKey(start) || !network.stations.containsKey(destination)) {
				System.out.println("잘못된 역 이름입니다. 프로그램을 종료합니다.");
			} else {
				int shortestTime = network.findShortestPath(start, destination);
				System.out.println("최단 시간: " + shortestTime + " 분");
			}

			long endTime = System.nanoTime();
			long elapsedTime = endTime - startTime;
			System.out.println(String.format("총 알고리즘이 걸린 시간: %,d나노초(ns) == %,f밀리초(ms) == %,f초(s)", elapsedTime,
					elapsedTime * 1e-6, elapsedTime * 1e-9)); // 실제 실행 시간
		}
	}
}
